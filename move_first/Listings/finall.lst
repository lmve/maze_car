C51 COMPILER V9.60.0.0   FINALL                                                            03/02/2023 16:11:13 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE FINALL
OBJECT MODULE PLACED IN .\Objects\finall.obj
COMPILER INVOKED BY: D:\mdk\C51\BIN\C51.EXE finall.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -finall.lst) TABS(2) OBJECT(.\Objects\finall.obj)

line level    source

   1          #include <reg52.h>
   2          #include "mouse.h"
   3          #define  uchar unsigned char
   4          #define  uint unsigned int
   5          #define N 8
   6          /* * * * * * * * * * * * * * * * * 
   7           *控制引脚申明
   8           */
   9          sbit tube1 = P4^3;
  10          sbit tube2 = P4^2;
  11          sbit beep = P3^7;
  12          /* * * * * * * * * * * * * * * * * *
  13           *数据单元
  14           */
  15          //原地转圈
  16          uchar code run1[] = {0x11,0x33,0x22,0x66,0x44,0xcc,0x88,0x99,0x11};
  17          //直行
  18          uchar code run2[] = {0x11,0x39,0x28,0x6c,0x44,0xc6,0x82,0x93,0x11};
  19          //数码管
  20          uchar code table[] = {0xc0,0xcf,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90,0x88,0x83,0xc6,0xa1,0x86,0x8e,0xff
             -};
  21          //地图
  22          uchar map[8][8] = {0};
  23          //位置坐标
  24          uchar location[2] = {7,0};
  25          //岔路口信息
  26          uchar stack[17][2] = {0};
  27          char finall[17] = {0 ,0, 1, 1, 0 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 0 };//路径数据
  28          char top = -1;
  29          uchar direction = 0;
  30          char head,rear,top1 = -1 ;
  31          unsigned char  b[6][2] ;//队列b，和记录路的座标的结构体数组
  32          char way[17] = {0};//路径数据 
  33          void recall();//回溯 
  34          void voice();
  35          uchar pass(uchar way);
  36          void init(){//初始化队列
  37   1          head = 0;
  38   1          rear = 0;
  39   1      }
  40          void pop(){//弹出队列成员
  41   1          char i;
  42   1          for(i = 1;i <= rear; i++)
  43   1          {
  44   2            b[i-1][0] = b[i][0];
  45   2            b[i-1][1] = b[i][1];
  46   2          }
  47   1          rear --;
  48   1      }
  49          void record(char x ,char y){//将走过的点信息加入队列，next为指向
  50   1      //上一个节点数据的指针
  51   1          b[rear][0] = x;
  52   1          b[rear][1] = y;
  53   1          rear ++;
C51 COMPILER V9.60.0.0   FINALL                                                            03/02/2023 16:11:13 PAGE 2   

  54   1      }
  55          
  56          /*
  57           *延时1ms
  58           */
  59          void delayms(uint n)
  60          {
  61   1        uchar i,j;
  62   1        for(j=n;j>0;j--)
  63   1        for(i=112;i>0;i--);
  64   1      }
  65          
  66          /* * * * * * * * * * * * * * * * * * * * * * * * * *
  67           *移动单元
  68           * * * * * * * * * * * * * * * * * * * * * * * * * *
  69           *
  70           *直行
  71           */
  72          void go_straight()
  73          {
  74   1      //  uchar j,i;
  75   1      //  for(j=0;j<106;j++)//一圈
  76   1      //  {
  77   1      //    for(i=8;i>0;i--)
  78   1      //    {
  79   1      //      P1 = run2[i];
  80   1      //      delayms(2);
  81   1      //    }
  82   1      //  }
  83   1        uchar i,j,k,l = 21;
  84   1        while(l--){
  85   2          for(i=0;i<5;i++)
  86   2          {
  87   3            for(j=8;j>0;j--)
  88   3            {
  89   4              P1 = run2[j];
  90   4              delayms(3);
  91   4            }
  92   3          }
  93   2            if((irLU==1) && (irC == 0))
  94   2            {
  95   3              //voice();
  96   3                for(k = 0 ;k < 3; k++)
  97   3              {
  98   4                for(j=0;j<8;j++)
  99   4                {
 100   5                  P1 = run1[j];
 101   5                  delayms(3);
 102   5                }
 103   4              }
 104   3              
 105   3            }
 106   2            if((irRU==1) && (irC == 0))
 107   2            {   
 108   3              //voice();
 109   3                for(k = 0;k < 3; k++)
 110   3              {
 111   4                for(j=8;j>0;j--)
 112   4                {
 113   5                  P1 = run1[j];
 114   5                  delayms(3);
 115   5                }
C51 COMPILER V9.60.0.0   FINALL                                                            03/02/2023 16:11:13 PAGE 3   

 116   4              }
 117   3            }
 118   2          }
 119   1      }
 120          
 121          /*
 122           *掉头
 123           */
 124          void back()
 125          {
 126   1        uchar i,j;
 127   1        for(i=0;i<102;i++)
 128   1        {
 129   2          for(j=0;j<8;j++)
 130   2          {
 131   3            P1 = run1[j];
 132   3            delayms(2);
 133   3          }
 134   2        }
 135   1        direction = (direction + 2) % 4;
 136   1      }
 137          
 138          /*
 139           *右转
 140           */
 141          void turn_right()
 142          {
 143   1        uchar i,j;
 144   1        for(i=0;i<52;i++)
 145   1        {
 146   2          for(j=0;j<8;j++)
 147   2          {
 148   3            P1 = run1[j];
 149   3            delayms(2);
 150   3          }
 151   2        }
 152   1        direction = (direction + 1) % 4;
 153   1      }
 154          
 155          /*
 156           *左转
 157           */
 158          void turn_left()
 159          {
 160   1        uchar i,j;
 161   1        for(i=0;i<52;i++)
 162   1        {
 163   2          for(j=8;j>0;j--)
 164   2          {
 165   3            P1 = run1[j];
 166   3            delayms(2);
 167   3          }
 168   2        }
 169   1        direction = (direction + 3) % 4;
 170   1      }
 171          /*
 172           *冲刺
 173           */
 174          void run_fast()
 175          {
 176   1          uchar i,j,k,l = 20;
 177   1        while(l--){
C51 COMPILER V9.60.0.0   FINALL                                                            03/02/2023 16:11:13 PAGE 4   

 178   2          for(i=0;i<5;i++)
 179   2          {
 180   3            for(j=8;j>0;j--)
 181   3            {
 182   4              P1 = run2[j];
 183   4              delayms(2);
 184   4            }
 185   3          }
 186   2            if((irLU==1) && (irC == 0))
 187   2            {
 188   3                
 189   3                for(k = 0 ;k < 3; k++)
 190   3              {
 191   4                for(j=0;j<8;j++)
 192   4                {
 193   5                  P1 = run1[j];
 194   5                  delayms(2);
 195   5                }
 196   4              }
 197   3              
 198   3            }
 199   2            if((irRU==1) && (irC == 0))
 200   2            {   
 201   3                
 202   3                for(k = 0;k < 3; k++)
 203   3              {
 204   4                for(j=8;j>0;j--)
 205   4                {
 206   5                  P1 = run1[j];
 207   5                  delayms(2);
 208   5                }
 209   4              }
 210   3            }
 211   2          }
 212   1      }
 213          
 214          /* * * * * * * * * * * * * * * * * * * * * * * * * *
 215           *外设单元
 216           * * * * * * * * * * * * * * * * * * * * * * * * * *
 217           *
 218           *蜂鸣器
 219           */
 220          void voice()
 221          {
 222   1          uchar j = 0;
 223   1          for(j = 10;j>0;j--){
 224   2            beep = ~beep;
 225   2            delayms(10);
 226   2          }
 227   1          for(j = 100;j>0;j--){
 228   2            beep = 1;
 229   2            delayms(10);
 230   2          }
 231   1      }
 232          
 233          /*
 234           *数码管
 235           */
 236          void display(uchar num)
 237          {
 238   1        uchar a,b;
 239   1        a = num / 10;
C51 COMPILER V9.60.0.0   FINALL                                                            03/02/2023 16:11:13 PAGE 5   

 240   1        b = num % 10;
 241   1        
 242   1        tube2 = 0;
 243   1        tube1 = 1;
 244   1        P0 = table[a];
 245   1        delayms(2);
 246   1        tube1 = 0;
 247   1        
 248   1        tube1 = 0;
 249   1        tube2 = 1;
 250   1        P0 = table[b];
 251   1        delayms(2);
 252   1        tube2 = 0;
 253   1      }
 254          ////行，列 显示
 255          void now_x(uchar num)
 256          {
 257   1        tube2 = 0;
 258   1        tube1 = 1;
 259   1        P0 = table[num];
 260   1        delayms(2);
 261   1        tube1 = 0;
 262   1      }
 263          void now_y(uchar num)
 264          {
 265   1        tube1 = 0;
 266   1        tube2 = 1;
 267   1        P0 = table[num];
 268   1        delayms(2);
 269   1        tube2 = 0;
 270   1      }
 271          /* * * * * * * * * * * * * * * * * * * * * * * * * *
 272           *传感器单元
 273           * * * * * * * * * * * * * * * * * * * * * * * * * *
 274           *
 275           *红外发射
 276           */
 277          void mouse_ir_on(uchar group_no)
 278          {
 279   1        A0 = (group_no) & 0x01;
 280   1        A1 = (group_no) & 0x02;
 281   1        A2 = (group_no) & 0x04;
 282   1      }
 283          
 284          /*
 285           *设置T2自动重装载寄存器和计数器
 286           */
 287          void setTime2(uint us)
 288          {
 289   1        TH2 = (65536 - us) % 256;
 290   1        RCAP2H = (65536 - us) / 256;
 291   1        TL2 = (65536 -us) % 256;
 292   1        RCAP2L = (65536 - us) % 256;
 293   1      }
 294          /*
 295           *定时计数器初始化
 296           */
 297          void initTime2()
 298          {
 299   1        EA = 1;
 300   1        ET2 = 1;
 301   1        setTime2(5000);//设置5ms中断一次
C51 COMPILER V9.60.0.0   FINALL                                                            03/02/2023 16:11:13 PAGE 6   

 302   1        TR2 = 1;
 303   1      }
 304          /*
 305           *避障测试
 306           */
 307          void test()
 308          {
 309   1        if(!irR)
 310   1        {
 311   2          turn_right();
 312   2          delayms(500);
 313   2          go_straight();
 314   2          delayms(1000);
 315   2        }
 316   1        else if(!irC)
 317   1        {
 318   2          go_straight();
 319   2          delayms(500);
 320   2          delayms(1000);
 321   2        }
 322   1        else if(!irL)
 323   1        {
 324   2          turn_left();
 325   2          delayms(500);
 326   2          go_straight();
 327   2          delayms(1000);
 328   2        }
 329   1        else
 330   1        {
 331   2          back();
 332   2          delayms(500);
 333   2          go_straight();
 334   2          delayms(500);
 335   2          voice();
 336   2          delayms(1000);
 337   2        }
 338   1          
 339   1      }
 340          void ir_test(){ // 测试某个方向的红外
 341   1         
 342   1              if(irL||irR||irC){
 343   2                  beep = 0;
 344   2              }else{
 345   2                  beep = 1;
 346   2              }
 347   1         
 348   1      }
 349          /* * * * * * * * * * * * * * * 
 350           * 第一部分 遍历迷宫
 351           * 地图初始化
 352           */
 353          void init_map()
 354          {
 355   1        uchar i,j;
 356   1        //入栈
 357   1        top++;
 358   1        stack[top][0] = location[0];
 359   1        stack[top][1] = location[1];
 360   1        for(i=0;i<8;i++)
 361   1        {
 362   2          for(j=0;j<8;j++)
 363   2          {
C51 COMPILER V9.60.0.0   FINALL                                                            03/02/2023 16:11:13 PAGE 7   

 364   3            map[i][j] = 0xff;
 365   3          }
 366   2        }
 367   1      }
 368            
 369           /*
 370           *记录当前位置信息
 371           */
 372          void save()
 373          {   unsigned char temp = 0,count = 0,temp1 = 0;
 374   1          switch(direction)//地图信息的记录* * * * 初次进入此单元格
 375   1          {
 376   2            case 0:temp+=irC; temp<<=1 ; temp+=irR; temp<<=2; temp+=irL; map[location[0]][location[1]] &= (0xf0+tem
             -p); map[location[0]][location[1]] &= 0xdf; break;
 377   2            case 1:temp+=irL; temp<<=1 ; temp+=irC; temp<<=1; temp+=irR; temp<<=1; map[location[0]][location[1]] &=
             - (0xf0+temp); map[location[0]][location[1]] &= 0xef; break;
 378   2            case 2:temp+=irL; temp<<=1 ; temp+=irC; temp<<=1; temp+=irR; map[location[0]][location[1]] &= (0xf0+tem
             -p); map[location[0]][location[1]] &= 0x7f; break;
 379   2            case 3:temp+=irR; temp<<=2 ; temp+=irL; temp<<=1; temp+=irC; map[location[0]][location[1]] &= (0xf0+tem
             -p); map[location[0]][location[1]] &= 0xbf; break;
 380   2          }
 381   1          if(location[0] == 7 && location[1] == 0)
 382   1          map[7][0] = 0xf7;
 383   1          //判断是否为岔路口
 384   1          if((!irC) && pass(0))
 385   1            count++;
 386   1          if((!irR) && pass(1))
 387   1            count++;
 388   1          if((!irL) && pass(3))
 389   1            count++;
 390   1          if(count>=2)//记录岔路口信息
 391   1          {
 392   2            top++;
 393   2            stack[top][0] = location[0];
 394   2            stack[top][1] = location[1];
 395   2          }
 396   1      } 
 397          /*
 398           *检查当前要走的方向是否走过
 399           *走过为0，否则为1
 400           */
 401          uchar pass(uchar way)
 402          {
 403   1          unsigned char x1,y1;
 404   1          x1 = location[0];
 405   1          y1 = location[1];
 406   1          switch(direction)
 407   1          {
 408   2            case 0: 
 409   2            {
 410   3              switch(way)
 411   3              {
 412   4                case 0: if(map[x1 - 1][y1] == 0xff) return 1;  return 0;//上 
 413   4                case 1: if(map[x1][y1 + 1] == 0xff) return 1;  return 0;//右 
 414   4                case 3: if(map[x1][y1 - 1] == 0xff) return 1;  return 0;//左 
 415   4              }
 416   3              
 417   3            }
 418   2            case 1: 
 419   2            {
 420   3              switch(way)
 421   3              {
C51 COMPILER V9.60.0.0   FINALL                                                            03/02/2023 16:11:13 PAGE 8   

 422   4                case 0: if(map[x1][y1+1] == 0xff) return 1;  return 0;//右
 423   4                case 1: if(map[x1+1][y1] == 0xff) return 1;  return 0;//下
 424   4                case 3: if(map[x1-1][y1] == 0xff) return 1;  return 0;//上 
 425   4              }
 426   3            }
 427   2            case 2: 
 428   2            {
 429   3              switch(way)
 430   3              {
 431   4                case 0: if(map[x1+1][y1] == 0xff) return 1;  return 0;//下 
 432   4                case 1: if(map[x1][y1-1] == 0xff) return 1;  return 0;//左
 433   4                case 3: if(map[x1][y1+1] == 0xff) return 1;  return 0;//右 
 434   4              }
 435   3            }
 436   2            case 3: 
 437   2            {
 438   3              switch(way)
 439   3              {
 440   4                case 0: if(map[x1][y1-1] == 0xff) return 1; return 0;//左 
 441   4                case 1: if(map[x1-1][y1] == 0xff) return 1; return 0;//上
 442   4                case 3: if(map[x1+1][y1] == 0xff) return 1; return 0;//下 
 443   4              }
 444   3            }
 445   2          }
 446   1      }
 447          /*
 448           * * 更新当前位置信息
 449           * 上 右 下 左 0 1 2 3
 450           */
 451          void move()
 452          {
 453   1        switch(direction)
 454   1        {
 455   2          case 0: {
 456   3            location[0] -= 1;
 457   3            break;
 458   3          }
 459   2          case 1:{
 460   3            location[1] += 1;
 461   3            break;
 462   3          }
 463   2          case 2:{
 464   3            location[0] += 1;
 465   3            break;
 466   3          }
 467   2          case 3:{
 468   3            location[1] -= 1;
 469   3            break;
 470   3          }
 471   2        }
 472   1      } 
 473          /*
 474           * 回溯
 475           */
 476          void recall()
 477          {
 478   1        unsigned char temp = 0,count = 0,temp1 = 0,i = 0; 
 479   1        temp = map[location[0]][location[1]];
 480   1        while(1)
 481   1        {
 482   2          temp = map[location[0]][location[1]];
 483   2          if(!((temp >>= 4) & 0x01))//左
C51 COMPILER V9.60.0.0   FINALL                                                            03/02/2023 16:11:13 PAGE 9   

 484   2          {
 485   3            
 486   3            switch(direction)
 487   3            {
 488   4              case 0: turn_left(); delayms(100); go_straight();delayms(100); break;
 489   4              case 1: back();delayms(100);go_straight();delayms(100); break;
 490   4              case 2: turn_right(); delayms(100); go_straight();delayms(100); break;
 491   4              case 3: go_straight(); delayms(100); break;
 492   4            }
 493   3            move(); 
 494   3            temp = map[location[0]][location[1]];
 495   3          }
 496   2          //显示当前坐标
 497   2          now_x(location[0]);
 498   2          now_y(location[1]);
 499   2          if(location[0] == stack[top][0] && location[1] == stack[top][1])
 500   2            break;
 501   2            
 502   2          
 503   2          temp = map[location[0]][location[1]];
 504   2          if(!((temp >>= 5) & 0x01))//下
 505   2          {
 506   3            switch(direction)
 507   3            {
 508   4              case 0: back();delayms(100);go_straight();delayms(100); break;
 509   4              case 1: turn_right(); delayms(100);go_straight();delayms(100);break;
 510   4              case 2: go_straight(); delayms(100); break;
 511   4              case 3: turn_left();delayms(100);go_straight();delayms(100);break;
 512   4            }
 513   3            move();
 514   3            temp = map[location[0]][location[1]];
 515   3          }
 516   2          //显示当前坐标
 517   2          now_x(location[0]);
 518   2          now_y(location[1]);
 519   2          if(location[0] == stack[top][0] && location[1] == stack[top][1])
 520   2            break;
 521   2          
 522   2          temp = map[location[0]][location[1]];
 523   2          if(!((temp >>= 6) & 0x01))//右
 524   2          {
 525   3            switch(direction)
 526   3            {
 527   4              case 0: turn_right();delayms(100);go_straight();delayms(100);break;
 528   4              case 1: go_straight();delayms(100); break;
 529   4              case 2: turn_left();delayms(100);go_straight();delayms(100); break;
 530   4              case 3: back();delayms(100);go_straight();delayms(100); break;
 531   4            }
 532   3             move();
 533   3            temp = map[location[0]][location[1]];
 534   3          }
 535   2          //显示当前坐标
 536   2          now_x(location[0]);
 537   2          now_y(location[1]);
 538   2          if(location[0] == stack[top][0] && location[1] == stack[top][1])
 539   2            break;
 540   2          
 541   2          temp = map[location[0]][location[1]];
 542   2          if(!((temp >>= 7) & 0x01))//上
 543   2          {
 544   3            switch(direction)
 545   3            {
C51 COMPILER V9.60.0.0   FINALL                                                            03/02/2023 16:11:13 PAGE 10  

 546   4              case 0: go_straight(); delayms(100); break;
 547   4              case 1: turn_left();delayms(100);go_straight();delayms(100);  break;
 548   4              case 2: back();delayms(100);go_straight();delayms(100);  break;
 549   4              case 3: turn_right();delayms(100); go_straight();delayms(100);break;
 550   4            }
 551   3            move(); 
 552   3            temp = map[location[0]][location[1]];
 553   3          }
 554   2          //显示当前坐标
 555   2          now_x(location[0]);
 556   2          now_y(location[1]);
 557   2          if(location[0] == stack[top][0] && location[1] == stack[top][1])
 558   2            break;
 559   2        }
 560   1        top--;//弹栈 
 561   1      }
 562          /* 
 563           *遍历迷宫
 564           */
 565          void find()
 566          {
 567   1          //显示当前坐标
 568   1          now_x(location[0]);
 569   1          now_y(location[1]); 
 570   1          //等待检测
 571   1      //    delayms(2);
 572   1          //判断当前位置是否为第一次到达
 573   1          if(map[location[0]][location[1]] == 0xff)
 574   1          save();
 575   1          
 576   1            if(irR==0&&pass(1))//右边无挡板且未走过
 577   1            {
 578   2              turn_right();
 579   2              delayms(100);
 580   2              go_straight();
 581   2              delayms(500);
 582   2              move();
 583   2            }
 584   1            else if(irC==0&&pass(0))//右边有挡板，前边无且未走过
 585   1            {
 586   2              go_straight();
 587   2              delayms(500);
 588   2              move();
 589   2            }
 590   1            else if(irL==0&&pass(3))//右边有挡板前边有，左边无
 591   1            {
 592   2              turn_left();
 593   2              delayms(100);
 594   2              go_straight();
 595   2              delayms(500);
 596   2              move();
 597   2            }
 598   1            else//死胡同
 599   1            {
 600   2              recall();
 601   2            }
 602   1      
 603   1      }
 604          
 605          
 606          /* * * * * * * * * * * * * 
 607           * 第三部分 冲刺
C51 COMPILER V9.60.0.0   FINALL                                                            03/02/2023 16:11:13 PAGE 11  

 608           * 冲刺
 609           */
 610          void run()
 611          {
 612   1        direction = 2;
 613   1        top1 = 13;
 614   1        back();
 615   1        while(top1 > -1)
 616   1        {
 617   2          switch(direction){
 618   3            case 0:
 619   3              {
 620   4          
 621   4            switch(finall[top1])
 622   4            {
 623   5              case 1: turn_right(); run_fast() ; break;
 624   5              case 0: run_fast() ; break; 
 625   5            }
 626   4            break;
 627   4          }
 628   3            case 1:{
 629   4              
 630   4            
 631   4            switch(finall[top1])
 632   4            {
 633   5              case 1: run_fast() ;break;
 634   5              case 0: turn_left(); run_fast() ; break; 
 635   5            } 
 636   4              break;
 637   4          }
 638   3           }
 639   2          top1--;
 640   2        } 
 641   1      
 642   1      } 
 643          
 644          
 645          void main()
 646          {
 647   1      //  initTime2();//初始化定时器
 648   1      //  while(1){
 649   1      //    //test();
 650   1      //    ir_test();
 651   1      //  }
 652   1        
 653   1        initTime2();//初始化定时器
 654   1        init_map();//初始化地图
 655   1        while(top >= 0)
 656   1        {
 657   2          delayms(500);
 658   2          find();//遍历地图
 659   2        }
 660   1        run();//冲刺
 661   1        voice();
 662   1        voice();
 663   1        voice();
 664   1        while(1);
 665   1      }
 666          /*
 667           *中断服务函数
 668           */
 669          void time2() interrupt 5{ // TIM2中断服务函数
C51 COMPILER V9.60.0.0   FINALL                                                            03/02/2023 16:11:13 PAGE 12  

 670   1          static bit ir = 0;
 671   1          static unsigned char n=1;
 672   1          TF2 = 0;
 673   1          if(!ir) {
 674   2              mouse_ir_on(n-1);
 675   2          }else{
 676   2              if(n==1){
 677   3                  if(irR1)  irC=0;
 678   3                  else      irC=1;
 679   3              }else if(n==2){
 680   3                  if(irR2)  irLU=0;
 681   3                  else      irLU=1;
 682   3              }else if(n==3){
 683   3                  if(irR3)  irL=0;
 684   3                  else      irL=1;
 685   3              }else if(n==4){
 686   3                  if(irR4)  irR=0;
 687   3                  else      irR=1;
 688   3              }else if(n==5){
 689   3                  if(irR5)  irRU=0;
 690   3                  else      irRU=1;
 691   3              }
 692   2          }
 693   1          if(ir)  n++;
 694   1          if(n>5) n=1;
 695   1          ir=~ir;
 696   1      }
 697          
*** WARNING C291 IN LINE 446 OF finall.c: not every exit path returns a value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3521    ----
   CONSTANT SIZE    =     35    ----
   XDATA SIZE       =    157       7
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
